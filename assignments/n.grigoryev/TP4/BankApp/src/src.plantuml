@startuml

    class BankAgencyApplication {
        {static} + initActions()
        {static} + main()
    }

    class bank.Account {
              - accountNumber : String
              - credits : double
              - debits : double
              - nbCredits : int
              - nbDebits : int
              - owner : String
              + Account()
              + Account()
              + balance()
              + deposit()
              + getAccountNumber()
              + getOwner()
              + print()
              + setOwner()
              + toString()
              + withdraw()
          }
          class bank.BankAgency {
              - accounts : ArrayList<Account>
              - loc : String
              - name : String
              + BankAgency()
              + addAccount()
              + getAccount()
              + getAccountsOf()
              + getAgencyLoc()
              + getAgencyName()
              + getNbAccounts()
              + print()
              + removeAccount()
              + toString()
              - findAccount()
          }

        class bank.exception.ABAccountAlreadyExistingException {
            + ABAccountAlreadyExistingException()
            + ABAccountAlreadyExistingException()
        }
        class bank.exception.ABInexistingAccountException {
            + ABInexistingAccountException()
            + ABInexistingAccountException()
        }
        class bank.exception.ABNullAccountException {
            + ABNullAccountException()
            + ABNullAccountException()
        }
        class bank.exception.AccountException {
            + AccountException()
            + AccountException()
        }

        class application.AccesBankAgency {
            {static} + getBankAgency()
            {static} + saveAgenceBancaire()
            - AccesBankAgency()
        }
class application.actioncontext.BankActionContext {
                {static} - instance : BankActionContext
                - printStream : PrintStream
                - scanner : Scanner
                + close()
                + getBankAgency()
                {static} + getInstance()
                + getPrintStream()
                + getScanner()
                + setInputStream()
                - BankActionContext()
            }
            interface application.actioncontext.GenericContext {
                {abstract} + close()
                {abstract} + getPrintStream()
                {abstract} + getScanner()
                {abstract} + setInputStream()
            }
  application.actioncontext.BankActionContext .up.|> application.actioncontext.GenericContext
  application.actioncontext.BankActionContext o-- bank.BankAgency : bankAgency

interface application.actionlist.ActionList {
                {abstract} + addAction()
                {abstract} + listOfActions()
                {abstract} + listTitle()
                {abstract} + removeAction()
                {abstract} + removeAction()
                {abstract} + size()
            }
            class application.actionlist.GenericActionList {
                ~ actionlist : ArrayList<Action<Context>>
                ~ code : String
                ~ message : String
                ~ title : String
                + GenericActionList()
                + actionCode()
                + actionMessage()
                + addAction()
                + execute()
                + listOfActions()
                + listTitle()
                + removeAction()
                + removeAction()
                + size()
            }

  application.actionlist.GenericActionList .up.|> application.actionlist.ActionList

interface application.action.Action {
              {abstract} + actionCode()
              {abstract} + actionMessage()
              {abstract} + execute()
          }
          class application.action.ActionAccountsList {
              - code : String
              - message : String
              + ActionAccountsList()
              + actionCode()
              + actionMessage()
              + execute()
          }
          class application.action.ActionAddAccount {
              - code : String
              - message : String
              + ActionAddAccount()
              + actionCode()
              + actionMessage()
              + execute()
          }
          class application.action.ActionDeleteAccount {
              - code : String
              - message : String
              + ActionDeleteAccount()
              + actionCode()
              + actionMessage()
              + execute()
          }
          class application.action.ActionDepositMoneyOnAccount {
              - code : String
              - message : String
              + ActionDepositMoneyOnAccount()
              + actionCode()
              + actionMessage()
              + execute()
              {static} - depositOnAccount()
          }
          class application.action.ActionSeeAccountNumber {
              ~ code : String
              ~ message : String
              + ActionSeeAccountNumber()
              + actionCode()
              + actionMessage()
              + execute()
          }
          class application.action.ActionWithdrawMoneyFromAccount {
              ~ code : String
              ~ message : String
              + ActionWithdrawMoneyFromAccount()
              + actionCode()
              + actionMessage()
              + execute()
              {static} - withdrawFromAccount()
          }

  application.action.ActionAccountsList .up.|> application.action.Action
  application.action.ActionAddAccount .up.|> application.action.Action
  application.action.ActionDeleteAccount .up.|> application.action.Action
  application.action.ActionDepositMoneyOnAccount .up.|> application.action.Action
  application.action.ActionSeeAccountNumber .up.|> application.action.Action
  application.action.ActionWithdrawMoneyFromAccount .up.|> application.action.Action


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
